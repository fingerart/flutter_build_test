name: Build installation files for Android and iOS

on:
  push:
    branches: [ test, release ]

env:
  OSS_BUCKET_CNAME: artifact-release.riveroll.top
  FLUTTER_XCODE_DEVELOPMENT_TEAM: 3QNVKN55MD
  FLUTTER_XCODE_PROVISIONING_PROFILE: 9e3e0f20-d232-48a0-958c-8b1a2f3a4ae8
  FLUTTER_XCODE_CODE_SIGN_IDENTITY: 'Apple Distribution: ORIGO ENTERTAINMENT PTE. LTD. (3QNVKN55MD)'

jobs:
  build-android:
    runs-on: ubuntu-latest
    if: false
    steps:
      - uses: actions/checkout@v4

      - name: Fake build
        run: |
          mkdir -p build/app/outputs/apk/debug/
          echo "Hello" > build/app/outputs/apk/debug/app-debug.apk
          ls -R build/app/outputs

      - name: Setup aliyun-cli
        uses: jerray/setup-aliyun-cli-action@v1.0.2
        with:
          aliyun-cli-version: '3.0.204'
          mode: AK
          access-key-id: ${{ secrets.OSS_ACCESS_KEY_ID }}
          access-key-secret: ${{ secrets.OSS_ACCESS_KEY_SECRET }}
          region: "ap-southeast-1"

#      # 安装Flutter环境
#      - name: Setup Flutter
#        uses: subosito/flutter-action@v2.16.0
#        with:
#          channel: 'stable'
#          cache: true
#
#      # 安装依赖
#      - name: Install dependencies
#        run: flutter pub get

      # 准备环境
      - name : Setup Environment
        id: app
        run: .github/scripts/setup-runtime-environment.sh
        shell: bash

      # 为不同环境作构建
#      - name: Build apk for test environment
#        if: ${{ github.ref_name == 'test' }}
#        run: flutter build apk -t lib/main_debug.dart --debug --dart-define=RELEASE_STORE=googleplay --no-tree-shake-icons
#
#      - name: Build apk for release environment
#        if: ${{ github.ref_name == 'release' }}
#        run: flutter build appbundle --release --obfuscate --split-debug-info=build/obfuscating --dart-define=RELEASE_STORE=googleplay --no-tree-shake-icons

      - name: Upload to oss
        id: upload-oss
        run: |
          dist_file_name="${{ steps.app.outputs.dist_file_name }}.${{ github.ref_name == 'test' && 'apk' || 'aab' }}"
          oss_path="oss://${{ vars.OSS_BUCKET }}/${{ steps.app.outputs.dist_dir }}/$dist_file_name"
          aliyun oss cp "${{ steps.app.outputs.output_file_path }}" "$oss_path" -f
          url=$(aliyun oss sign "$oss_path" --timeout 31536000 --query-param "response-content-disposition:attachment;filename=$dist_file_name" | grep -oE 'http[s]?:\/\/[^ ]+')
          echo "$url" | sed 's#://[^/#?]*#://${{ env.OSS_BUCKET_CNAME }}#' | xargs -I {} echo "download_url={}" >> "$GITHUB_OUTPUT"

      - name: Notify lark for success
        run: .github/scripts/notify-lark.sh -s success
        shell: bash
        env:
          PLATFORM: Android
          LARK_APP_ID: ${{ secrets.LARK_APP_ID }}
          LARK_APP_SECRET: ${{ secrets.LARK_APP_SECRET }}
          LARK_CHATROOM_ID: ${{ secrets.LARK_CHATROOM_ID }}
          DOWNLOAD_URL: ${{ steps.upload-oss.outputs.download_url }}
          VERSION: ${{ steps.app.outputs.version_name }}
          PRODUCT_IMG_URL: ${{ vars.PRODUCT_IMG_KEY }}

      - name: Notify lark for failure
        if: ${{ failure() }}
        run: .github/scripts/notify-lark.sh -s failure
        shell: bash
        env:
          PLATFORM: Android
          LARK_APP_ID: ${{ secrets.LARK_APP_ID }}
          LARK_APP_SECRET: ${{ secrets.LARK_APP_SECRET }}
          LARK_CHATROOM_ID: ${{ secrets.LARK_CHATROOM_ID }}
          VERSION: ${{ steps.app.outputs.version_name }}
          PRODUCT_IMG_URL: ${{ vars.PRODUCT_IMG_KEY }}

  build-ios:
    runs-on: macos-latest
    if: ${{ github.ref_name == 'test' }}
    steps:
      - uses: actions/checkout@v4

      - name: Install the Apple certificate and provisioning profile
        run: |
          # 准备描述文件
          profile_path="~/Library/MobileDevice/Provisioning\ Profiles"
          mkdir -p "$profile_path"
          echo "${{ secrets.IOS_PROVISIONING_PROFILE_ADHOC_BASE64 }}" | base64 --decode --output "$profile_path/ad-hoc.mobileprovision"
          
          # 准备证书
          keychain_path="${{ runner.temp }}/app-signing.keychain"
          distribution_p12_path="${{ runner.temp }}/distribution.p12"
          echo "${{ secrets.IOS_DISTRIBUTION_P12_BASE64 }}" | base64 --decode --output "$distribution_p12_path"
          
          # 创建keychain
          security create-keychain -p "${{ secrets.IOS_KEYCHAIN_PASSWORD }}" "$keychain_path"
          # security default-keychain -s "$keychain_path"
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "${{ secrets.IOS_KEYCHAIN_PASSWORD }}" "$keychain_path"
          
          # 导入证书
          security import "$distribution_p12_path" -A -t cert -f pkcs12 -k "$keychain_path" -P "${{ secrets.IOS_DISTRIBUTION_P12_PASSWORD }}"
          security list-keychains -d user -s "$keychain_path"
          
          echo 'Provisioning Profiles:'
          ls -al "$profile_path"
          echo 'runner.temp:'
          ls -al "${{ runner.temp }}"

      - name: Setup aliyun-cli
        uses: jerray/setup-aliyun-cli-action@v1.0.2
        with:
          aliyun-cli-version: '3.0.204'
          mode: AK
          access-key-id: ${{ secrets.OSS_ACCESS_KEY_ID }}
          access-key-secret: ${{ secrets.OSS_ACCESS_KEY_SECRET }}
          region: "ap-southeast-1"

      - name: Install Flutter
        uses: subosito/flutter-action@v2.16.0
        with:
          channel: 'stable'
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Pod repo update
        run: pod repo update

      # 准备环境
      - name : Setup Environment
        id: app
        run: .github/scripts/setup-runtime-environment.sh

#      - name: Fake build
#        run: |
#          mkdir -p build/ios/ipa/
#          echo "Hello" > build/ios/ipa/automation_build.ipa
#          ls -R build/ios/ipa/

      - name: Build iOS ipa
        run: flutter build ipa -t lib/main_debug.dart -v --profile --no-tree-shake-icons --obfuscate --split-debug-info=build/obfuscating --export-options-plist=ios/ExportOptions.plist

      - name: Upload ipa to oss
        id: upload-ipa
        run: |
          dist_file_name="${{ steps.app.outputs.dist_file_name }}.ipa"
          oss_path="oss://${{ vars.OSS_BUCKET }}/${{ steps.app.outputs.dist_dir }}/$dist_file_name"
          aliyun oss cp "${{ steps.app.outputs.output_file_path }}" "$oss_path" -f
          url=$(aliyun oss sign "$oss_path" --timeout 31536000 | grep -oE 'http[s]?:\/\/[^ ]+')
          echo "$url" | sed 's#://[^/#?]*#://${{ env.OSS_BUCKET_CNAME }}#' | xargs -I {} echo "download_url={}" >> "$GITHUB_OUTPUT"

      - name: Make install manifest file
        id: make-manifest
        run: .github/scripts/make-ios-install-manifest.sh -u "${{ steps.upload-ipa.outputs.download_url }}" -n ${{ env.PROJECT_NAME }} -o "./dist" -b "com.ai.video.mova.ios"

      - name: Upload install manifest file
        id: upload-manifest
        run: |
          dist_file_path="${{ steps.app.outputs.dist_dir }}/manifest-${{ env.GITHUB_SHA_SHORT }}.plist"
          oss_path="oss://${{ vars.OSS_BUCKET }}/$dist_file_path"
          aliyun oss cp ${{ steps.make-manifest.outputs.manifest_path }} "$oss_path" -f
          aliyun oss set-acl "$oss_path" public-read
          echo "https://${{env.OSS_BUCKET_CNAME}}/$dist_file_path" | xargs -I {} echo "download_url={}" >> "$GITHUB_OUTPUT"

      - name: Genarate manifest qrcode
        uses: iChengbo/generate-qrcode@v0.3.0
        id: manifest-qrcode
        with:
          text: itms-services://?action=download-manifest&url=${{ steps.upload-manifest.outputs.download_url }}

      - name: Notify lark for success
        run: .github/scripts/notify-lark.sh -s success
        shell: bash
        env:
          PLATFORM: iOS
          LARK_APP_ID: ${{ secrets.LARK_APP_ID }}
          LARK_APP_SECRET: ${{ secrets.LARK_APP_SECRET }}
          LARK_CHATROOM_ID: ${{ secrets.LARK_CHATROOM_ID }}
          DOWNLOAD_URL: ${{ steps.upload-ipa.outputs.download_url }}
          VERSION: ${{ steps.app.outputs.version_name }}
          PRODUCT_IMG_URL: ${{ vars.PRODUCT_IMG_KEY }}
          QRCODE_IMG_PATH: ${{ steps.manifest-qrcode.outputs.QR_CODE_PNG_PATH }}

      - name: Notify lark for failure
        if: ${{ failure() }}
        run: .github/scripts/notify-lark.sh -s failure
        shell: bash
        env:
          PLATFORM: iOS
          LARK_APP_ID: ${{ secrets.LARK_APP_ID }}
          LARK_APP_SECRET: ${{ secrets.LARK_APP_SECRET }}
          LARK_CHATROOM_ID: ${{ secrets.LARK_CHATROOM_ID }}
          VERSION: ${{ steps.app.outputs.version_name }}
          PRODUCT_IMG_URL: ${{ vars.PRODUCT_IMG_KEY }}
