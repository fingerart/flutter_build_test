name: Build installation files for Android and iOS

on:
  push:
    branches: [ test, release ]

env:
  OSS_HOST: artifact-release.riveroll.top

jobs:
  build-android:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

#      - name: Fake build
#        run: |
#          mkdir -p build/app/outputs/bundle/debug/
#          echo "Hello" > build/app/outputs/bundle/debug/app-debug.aab
#          ls -R build/app/outputs

#      - uses: jerray/setup-aliyun-cli-action@v1.0.2
#        with:
#          aliyun-cli-version: '3.0.165'
#          mode: AK
#          access-key-id: ${{ secrets.OSS_ACCESS_KEY_ID }}
#          access-key-secret: ${{ secrets.OSS_ACCESS_KEY_SECRET }}
#          region: "oss-ap-southeast-1"

      - name: Setup ossutil
        uses: manyuanrong/setup-ossutil@v3.0
        with:
          endpoint: "https://oss-ap-southeast-1.aliyuncs.com"
          access-key-id: ${{ secrets.OSS_ACCESS_KEY_ID }}
          access-key-secret: ${{ secrets.OSS_ACCESS_KEY_SECRET }}

      # 安装Flutter环境
      - name: Setup Flutter
        uses: subosito/flutter-action@v2.16.0
        with:
          channel: 'stable'
          cache: true

      # 安装依赖
      - name: Install dependencies
        run: flutter pub get

      # 准备环境
      - name : Setup Environment
        id: app
        run: .github/scripts/setup-runtime-environment.sh
        shell: bash

      # 为不同环境作构建
      - name: Build apk for test environment
        if: ${{ github.ref_name == 'test' }}
        run: flutter build apk -t lib/main_debug.dart --debug --dart-define=RELEASE_STORE=googleplay --no-tree-shake-icons

      - name: Build apk for release environment
        if: ${{ github.ref_name == 'release' }}
        run: flutter build appbundle --release --obfuscate --split-debug-info=build/obfuscating --dart-define=RELEASE_STORE=googleplay --no-tree-shake-icons

      - name: Upload to oss
        id: upload-oss
        run: |
          suffix="${{ github.ref_name == 'test' && 'apk' || 'aab' }}"
          oss_path="oss://${{ vars.OSS_BUCKET }}/${{ steps.app.outputs.dist_dir }}/${{ steps.app.outputs.dist_file_name }}.$suffix"
          ossutil cp -f "${{ steps.app.outputs.output_file_path }}" "$oss_path"
          url=$(ossutil sign "$oss_path" --timeout 31536000 | grep -oE 'http[s]?:\/\/[^ ]+')
          echo "$url" | sed 's#://[^/#?]*#://${{ env.OSS_HOST }}#' | xargs -I {} echo "download_url={}" >> "$GITHUB_OUTPUT"

      - name: Notify lark for success
        run: .github/scripts/notify-lark.sh
        shell: bash
        env:
          LARK_APP_ID: ${{ secrets.LARK_APP_ID }}
          LARK_APP_SECRET: ${{ secrets.LARK_APP_SECRET }}
          LARK_CHATROOM_ID: ${{ secrets.LARK_CHATROOM_ID }}
          DOWNLOAD_URL: ${{ steps.upload-oss.outputs.download_url }}
          VERSION: ${{ steps.app.outputs.version_name }}
          PRODUCT_IMG_URL: ${{ vars.PRODUCT_IMG_KEY }}
          PLATFORM: Android

      - name: Notify lark for failure
        if: ${{ failure() }}
        run: |
          echo "failure."

  build-ios:
    runs-on: macos-latest
#    if: ${{ github.ref_name == 'test' }}
    if: false
    steps:
      - uses: actions/checkout@v4

      - name: Setup ossutil
        uses: manyuanrong/setup-ossutil@v3.0
        with:
          endpoint: "https://oss-ap-southeast-1.aliyuncs.com"
          access-key-id: ${{ secrets.OSS_ACCESS_KEY_ID }}
          access-key-secret: ${{ secrets.OSS_ACCESS_KEY_SECRET }}

      - name: Install Flutter
        uses: subosito/flutter-action@v2.16.0
        with:
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      # 准备环境
      - name : Setup Environment
        id: app
        run: .github/scripts/setup-runtime-environment.sh
        shell: bash

      - name: Build iOS ipa
        run: flutter build ipa -t lib/main_debug.dart --profile --export-method=development --no-tree-shake-icons --obfuscate --split-debug-info=build/obfuscating

      - name: Upload to oss
        id: upload-oss
        run: |
          oss_path="oss://${{ vars.OSS_BUCKET }}/${{ steps.app.outputs.dist_dir }}/${{ steps.app.outputs.dist_file_name }}.ipa"
          ossutil cp -f ${{ steps.app.outputs.output_file_path }} "$oss_path"
          url=$(ossutil sign "$oss_path" --timeout 31536000 | grep -oE 'http[s]?:\/\/[^ ]+')
          echo "$url" | sed 's#://[^/#?]*#://${{ env.OSS_HOST }}#' | xargs -I {} echo "download_url={}" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Make install manifest file
        id: make-install-manifest
        run: .github/scripts/make-ios-install-manifest.sh -u "${{ steps.upload-oss.outputs.download_url }}" -n ${{ env.PROJECT_NAME }} -o "./dist" -b "com.ai.video.mova.ios"
        shell: bash

      - name: Upload install manifest file
        id: upload-install-manifest
        run: |
          oss_path="oss://${{ vars.OSS_BUCKET }}/${{ steps.app.outputs.dist_dir }}/manifest-${{ env.GITHUB_SHA_SHORT }}.plist"
          ossutil cp -f ${{ steps.make-install-manifest.outputs.manifest_path }} "$oss_path"
          ossutil sign "$oss_path" --timeout 31536000 | grep -oE 'http[s]?:\/\/[^ ]+' | xargs -I {} echo "download_url={}" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Genarate manifest qrcode
        uses: iChengbo/generate-qrcode@v0.3.0
        id: manifest-qrcode
        with:
          text: itms-services://?action=download-manifest&url=${{ steps.upload-install-manifest.outputs.download_url }}

      - name: Notify lark for success
        run: .github/scripts/notify-lark.sh
        shell: bash
        env:
          LARK_APP_ID: ${{ secrets.LARK_APP_ID }}
          LARK_APP_SECRET: ${{ secrets.LARK_APP_SECRET }}
          LARK_CHATROOM_ID: ${{ secrets.LARK_CHATROOM_ID }}
          DOWNLOAD_URL: ${{ steps.upload-oss.outputs.download_url }}
          VERSION: ${{ steps.app.outputs.version_name }}
          PRODUCT_IMG_URL: ${{ vars.PRODUCT_IMG_KEY }}
          PLATFORM: iOS
          QRCODE_IMG_PATH: ${{ steps.manifest-qrcode.outputs.QR_CODE_PNG_PATH }}
